#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt

from libs.Polytrope import PolytropicProfile
from libs.uniform_sphere import Sphere
from libs.OptionsParser import OptionsParser
from libs.Utils import save_particles,display_profiles

def main():

    #initialize parameters
    op = OptionsParser()
    op = op.get_args()
    N = op.num
    M = op.mass
    R = op.radius

    #solve the Lane-Emden equation
    prof = PolytropicProfile(gamma=op.gamma)
    prof.compute_profile(M=M, R=R)
    x, Density, InternalEnergy = prof.x, prof.rho, prof.u
    x /= x[-1]

    # first generate a sphere with uniform distribution of particles
    sphere = Sphere(N=N)
    Ngas = sphere.Npart
    pos = sphere.pos
    # derived quantities
    r = np.linalg.norm(pos, axis=1)
    vel = np.zeros((Ngas,3))
    mpart = M / Ngas
    r = np.linalg.norm(pos, axis=1)
    mass = np.full(Ngas, mpart)
    u = np.zeros(Ngas)
    ids = np.arange(1, Ngas+1)

    # shells containing roughly equal number of particles
    r_n = np.array([0.])
    i = 0
    if Ngas > 100:
        n_bin = 0.01 * Ngas
    else:
        n_bin = 1.
    r_n0 = n_bin / Ngas
    while r_n[i] <= 1.:
        r_n = np.append(r_n, (r_n0 + r_n[i]**3)**(1./3.))
        i += 1

    #scale all distances
    pos *= R
    x   *= R
    r   *= R
    r_n *= R

    print("Stretching particles...")
    r_n_new = np.zeros(len(r_n))
    rho_n = np.zeros(len(r_n) - 1)
    for i in range(len(r_n) - 1):
        idx = np.where((r < r_n[i+1]) & (r >= r_n[i]))
        ngas = len(idx[0])
        vol = 4 * np.pi / 3. * (r_n[i+1]**3 - r_n[i]**3)
        rho0 = mpart * ngas / vol
        idx = int(r_n_new[i] / x[-1] * (len(x) - 1))
        r_n_new[i+1] = (rho0 / Density[idx] * (r_n[i+1]**3 - r_n[i]**3) \
                        + r_n_new[i]**3)**(1./3.)
        vol_new = 4 * np.pi/3. * (r_n_new[i+1]**3 - r_n_new[i]**3)
        if vol_new > 0.:
            rho_n[i] = mpart * ngas / vol_new

    for i in range(len(r_n) - 1):
        idx = np.where( (r < r_n[i+1]) & (r >= r_n[i]) )
        for j in idx[0]:
            r_new = r_n_new[i] + (r_n_new[i+1] - r_n_new[i]) \
                    / (r_n[i+1] - r_n[i]) * (r[j] - r_n[i])
            if r[j] > 0:
                pos[j,0] *= r_new / r[j]
                pos[j,1] *= r_new / r[j]
                pos[j,2] *= r_new / r[j]
            idx = int(r_new / x[-1] * (len(x) - 1))
            u[j] = InternalEnergy[idx]


    if op.plot:
        fig = plt.subplots(figsize=(6,6))
        plt.subplots_adjust(hspace=0.1, right=0.95, top=0.95)
        ax1 = plt.subplot(211)
        ax2 = plt.subplot(212, sharex=ax1)
        prof.plot_profile(field='rho', label=r'Analytic profile', lw=2,
                          axes=ax1, R=R, M=M)
        prof.plot_profile(field='u', label=r'Analytic profile', lw=2,
                          axes=ax2, R=R, M=M)
        display_profiles(op.gamma, mpart, pos, u, ax=(ax1,ax2))
        plt.show()


    print("Writing output file...")
    save_particles(ids, pos, vel, mass, u, op.outfile, op.format)


if __name__=="__main__":
    main()
    print("done...bye!")

